{"name":"Pracmachlearning","tagline":"","body":"---\r\ntitle: \"Prediction Assignment - Model Building using Caret Package in R\"\r\noutput: html_document\r\n---\r\n# Introduction  \r\nThe purpose of this report is to explain how the model building is done in R to predict the manner of the exercise for the given test cases. I developed my model using the Caret package and Random Forest Package in R.  \r\n\r\n# Variable selection and Cross Validation  \r\nThe training data given is loaded into R. The first six columns are removed from the dataframe as they don't contribute to the model building. There are several variables with more than 95% of missing data. All these variables are also removed from the dataset. It is then  split into two train and test sections using createDataPartition. \r\n\r\n```{r, message=FALSE}\r\nactivity <- read.csv(\"tr.csv\",header=T,na.strings=c(\"NA\",\"\"))\r\nactivity <- activity[,-c(1:6)]\r\nactivity <- activity[,colSums(is.na(activity))<1000]\r\nlibrary(caret)\r\nlibrary(randomForest)\r\ninTrain <- createDataPartition(y=activity$classe,p=0.75,list=F)\r\ntraining <- activity[inTrain,]\r\ntesting <- activity[-inTrain,]\r\n```\r\n\r\nThe next step is to check for correlation between variables. Histograms are plotted for some continuous variables to see if pre processing is necessary. \r\n```{r}\r\npar(mfrow=c(2,2))\r\nhist(training$yaw_dumbbell)\r\nhist(training$pitch_arm )\r\nhist(training$roll_belt)\r\nhist(training$pitch_forearm)\r\nnsv <- nearZeroVar(training,saveMetrics=TRUE)\r\n```\r\n# Pre Processing and Final Model  \r\nThere are no variables with near zero variance. But the histograms show that some variables need standardizing. Hence pre processing is done on the variables. Then a model is fitted using the randomForest package and prediction is done on test dataset. \r\n```{r}\r\npreProc <- preProcess(training[,-54],method=\"pca\")\r\ntrainPC <- predict(preProc,training[,-54])\r\nmodelFit <- randomForest(training$classe~.,data=trainPC)\r\ntestPC <- predict(preProc,testing[,-54])\r\nconfusionMatrix(testing$classe,predict(modelFit,testPC))$overall[1]\r\n```\r\n\r\n# Error Rate and Accuracy  \r\n\r\nThe accuracy of this model on the test set is `r confusionMatrix(testing$classe,predict(modelFit,testPC))$overall[1]`. Therefore out of sample error rate can be calculated as `r (1 -  confusionMatrix(testing$classe,predict(modelFit,testPC))$overall[1])*100` %. The accuracy is pretty high to consider this as final model. 100% acuurate prediction is achieved using this model on the 20 test cases. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}